/* 
 * Copyright 2006, Queensland University of Technology
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy of 
 * the License at 
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations under 
 * the License.
 * 
 * Author: Shaun Mangelsdorf
 * Creation Date: 09/11/2006
 * 
 * Purpose: Interface for the authentication processor component of the SPEP, deals
 * 		with SAML requests/responses for the authn transaction with the ESOE.
 */
package com.qut.middleware.spep.authn;

import org.w3c.dom.Element;

import com.qut.middleware.spep.exception.AuthenticationException;
import com.qut.middleware.spep.exception.LogoutException;
import com.qut.middleware.spep.sessions.PrincipalSession;

/** Interface for the authentication processor component of the SPEP, deals
 * 		with SAML requests/responses for the authn transaction with the ESOE.*/
public interface AuthnProcessor 
{
	/**
	 * The result of a session validation.
	 */
	public enum result
	{
		/** The session was validated successfully */
		success,
		/** The session was not validated, and should be terminated */
		failure
	}

	/**
	 * Processes an authentication response that was generated by the ESOE. 
	 * The response would be generated based on a prior request generated by 
	 * the generateAuthnRequest method.
	 * @param data The authn data.
	 * @throws AuthenticationException 
	 */
	public void processAuthnResponse(AuthnProcessorData data) throws AuthenticationException;
	
	/**
	 * Generates a SAML Authn request to be passed to the ESOE when an
	 * unauthenticated session is initiated on the SPEP.
	 * @param data The authn data 
	 * @throws AuthenticationException 
	 */
	public void generateAuthnRequest(AuthnProcessorData data) throws AuthenticationException;
	
	/**
	 * Validates that a session exists in the session cache and has not expired.
	 * @param sessionID The session ID to search for
	 * @return Client session, or null if it couldn't be verified.
	 */
	public PrincipalSession verifySession(String sessionID);
	
	/**
	 * Terminates a session at the request of the authentication authority.
	 * @param data The authn data
	 * @throws LogoutException
	 */
	public Element logoutPrincipal(Element requestDocument) throws LogoutException;
}
