
def excludedProjects = [
	':spepintegrators',
	':esoedelegators',
	':esoeauthnplugins',
	':esoessoplugins',
	':esoeidentityplugins',
	':spepintegrators:grails'
]

configure(subprojects.findAll{!(it.path in excludedProjects)}) {
	usePlugin 'groovy'
	usePlugin 'eclipse'

	group = 'esoeproject'
	version = '0.9.6'

	sourceSets {
		main {
			java {
				srcDir 'src'
			}
		}
		test {
			groovy {
				srcDir 'tests/regression'
				srcDir 'tests/functional'
			}
			resources {
				srcDir 'tests/testdata'
			}
		}
	}

	def cobSerFile="${project.buildDir}/cobertura.ser"
	def srcOriginal="${sourceSets.main.classesDir}"
	def srcCopy="${srcOriginal}-copy"

	repositories  {
		mavenCentral()
		mavenRepo urls:'http://download.java.net/maven/2/'
	}

	dependencies {
		groovy 'org.codehaus.groovy:groovy-all:1.6.5'

		testRuntime 'net.sourceforge.cobertura:cobertura:1.9.3'

		testCompile 'junit:junit:4.7'
		testCompile 'org.spockframework:spock-core:0.2'
		testCompile 'cglib:cglib-nodep:2.2'
	    testCompile 'org.easymock:easymock:2.5.2'

		compile 'javax.servlet:servlet-api:2.5'

		['api', 'log4j12'].each {
			compile "org.slf4j:slf4j-${it}:1.5.8"
		}
	}

	test.doFirst  {
		ant {
			// delete data file for cobertura, otherwise coverage would be added
			delete(file:cobSerFile, failonerror:false)
			// delete copy of original classes
			delete(dir: srcCopy, failonerror:false)
			// import cobertura task, so it is available in the script
			taskdef(resource:'tasks.properties', classpath: configurations.testRuntime.asPath)
			// create copy (backup) of original class files
			copy(todir: srcCopy) {
				fileset(dir: srcOriginal)
			}
			// instrument the relevant classes in-place
			'cobertura-instrument'(datafile:cobSerFile) {
				fileset(dir: srcOriginal) {
					include "com/qut/middleware/**/*.class"
					exclude "**/*Specification.class"
					exclude "**/*Test.class"
					exclude "**/*Tests.class"
				}
			}
		}
	}

	test {
		options.systemProperties['net.sourceforge.cobertura.datafile']="${cobSerFile}"
	}

	test.doLast {                  
		if (new File(srcCopy).exists()) {
			// replace instrumented classes with backup copy again
			ant {                  
				delete(file: srcOriginal)       
				move(file: srcCopy,
				tofile: srcOriginal)
			}
			// create cobertura reports     
			ant.'cobertura-report'(destdir:"${project.buildDirName}/reports/coverage",
				format:'html', srcdir:"src/main/java", datafile:cobSerFile)
		}
	}

	task copy(type:Copy) {
		from 'src'
		into compileJava.destinationDir
		exclude '**/*.java'
	}

	eclipseCp.srcDirs += sourceSets.main.groovy.srcDirs
	eclipseCp.testSrcDirs += sourceSets.test.groovy.srcDirs

	classes.dependsOn copy
}

dependsOnChildren()

